plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.placki'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Custom Gradle task to copy files
tasks.register('copyFrontendToStatic', Copy) {
    def sourcePath = file("${project.rootDir}/frontend/frontend-app/dist/frontend-app/browser")
    def destinationPath = file("${project.rootDir}/src/main/resources/static")

    from sourcePath // Source folder
    into destinationPath // Destination folder

    doFirst {
        // Ensure the destination folder exists
        if (!destinationPath.exists()) {
            println "Destination folder does not exist. Creating: ${destinationPath}"
            destinationPath.mkdirs()
        }

        println "Copying files from ${sourcePath} to ${destinationPath}"
    }
}

// Ensure the copy task runs before processResources
tasks.named('processResources') {
    dependsOn copyFrontendToStatic
}

// Ensure the copy task runs before bootRun
tasks.named('bootRun') {
    dependsOn copyFrontendToStatic
}



